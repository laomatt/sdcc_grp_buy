<h2><%= @grp.name %></h2>

<p>
	<b>Group Coordinator: <a href="#" class='user-modal-pop btn' data-toggle="modal" data-target="#userModal" data-id='<%= @grp.user.try(:id) %>'> <%= @grp.user.try(:name) %></b> </a> (<%= @grp.user.try(:email) %>)
</p>
<hr>
<div class="row" style="width: 90%;">


	<div class="member-box room-box col-md-6">
	<% if  @grp.member_groups.count == 1 %>
		<h2 class='number-of-members'><%= @grp.member_groups.count %> Member in this buying group</h2>
	<% elsif  @grp.member_groups.count == 0 %>
		<h2 class='number-of-members'>This buying group is empty</h2>
	<% else %>
		<h2 class='number-of-members'><%= @grp.member_groups.count %> Members in this buying group</h2>
		<h5><a href="#" id='non-covered-toggle' style="width: 100%" class='btn btn-primary btn-lg'>Toggle Non-Covered Members</a></h5>
	<% end %>
		<div class="member-list" id='member-list'>
			<% @grp.member_groups.each do |mem_grp| %>
				<%= render :partial => 'member_list_item', :locals => { :member => mem_grp.member, :mem_grp => mem_grp, :grp => @grp } %>
			<% end %>
		</div>
		<% if current_user.groups.map { |e| e.id }.include?(@grp.id) %>
		<div class="create-form">
			<h2>Add member to this group</h2>
			<p>
				<b>(Only the user that started this group may add members to this group)</b>
			</p>
			<p>
				To register yourself or a member into this group, please provide a valid SDCC member ID here, and check off the days desired.
			</p>
			<form method="post" id="reg-member">
				<input type="hidden" name="member_group[group_id]" value="<%= @grp.id %>">
					<input type="text" name="sdcc_member_id" id='sdcc_member_id_holder' class="form-control" style='width: 100%' placeholder="SDCC member ID">
					<div id="error_list" style="color: red"></div>

					<hr>
					<input type="submit" name="ADD">
			</form>
		</div>
		<!-- id: integer, user_id: integer, sdcc_member_id: integer, name: string, phone: string, email: string, covered: boolean, -->
		<div id="new-member-form" style='display: none;'>
			<div class="create-form">
				<form action='/members' method='POST' id='create-member-form'>
					<h3>Create a new Member</h3>
					<%= hidden_field_tag :authenticity_token, form_authenticity_token %>
					<div class="form-group">
						<label for='member[name]'>Name</label>
						<input class="form-control" type="text" name='member[name]'>
					</div>
		      <div class="form-group">
		        <label for='member[last_name]'>Last Name</label>
		        <input class="form-control" type="text" name='member[last_name]'>
		      </div>
					<div class="form-group">
						<label for='member[phone]'>Phone</label>
						<input class="form-control" type="text" name='member[phone]'>
					</div>
					<div class="form-group">
						<label for='member[email]'>E-Mail</label>
						<input class="form-control" type="text" name='member[email]'>
					</div>
					<div class="form-group">
						<label for='member[phone]'>SDCC Member ID</label>
						<input class="form-control" id='sdcc_member_id_holder_create' type="text" name='member[sdcc_member_id]'>
					</div>
					<h3>Select the Days this member needs</h3>
					<div class="form-check form-check-stacked">
					  <label class="form-check-label">
					  	<%= check_box_tag 'member[wensday]' %> Wensday
					  </label>
					</div>
					<div class="form-check form-check-stacked">
					  <label class="form-check-label">
					  	<%= check_box_tag 'member[thursday]' %> Thursday
					  </label>
					</div>
					<div class="form-check form-check-stacked">
					  <label class="form-check-label">
					  	<%= check_box_tag 'member[friday]' %> Friday
					  </label>
					</div>

					<div class="form-check form-check-stacked">
					  <label class="form-check-label">
					  	<%= check_box_tag 'member[saturday]' %> Saturday
					  </label>
					</div>

					<div class="form-check form-check-stacked">
					  <label class="form-check-label">
					  	<%= check_box_tag 'member[sunday]' %> Sunday
					  </label>
					</div>

					<div id="error_list" style="color: red"></div>
					<button type="submit" class="btn btn-primary">Register Member</button>
				</form>
			</div>
		</div>
		<% end %>
	</div>
	<div class='col-md-6'>
		<h2>Group Chat</h2>
		<a href="#" class='btn btn-sm btn-primary expand-chat-log' style=''>Toggle chat log</a>
		
		<div class="chat-box room-box">
			<div id="chat_container">
				<div class="chat-form">
					<form>
						<input type="text" name="" class='form-control chat-message-input' placeholder="SAy sumthin'.....">
					</form>
					<span class="someone_typing">Someone is typing a message.....</span>
				</div>
				<div class="chat-log" id='chat_log'>
					<% @grp.chat_messages.order('created_at DESC').each do |message| %>
						<%= render :partial => 'groups/chat_line', :locals => { :message => message, :user => message.user, :from => 'todom' } %>			
					<% end %>
				</div>
			</div>
		</div>
	</div>
</div>

<style type="text/css">
</style>
<script type="text/javascript">
  var dispatcher;
  var connection;
  var connectionID;
  var channel;
  var group_room_conn;
  var current_user_id = <%= current_user.id %>;
  var activeDispatcher = false;

  $('body').on('click', '.form-check-stacked', function(event) {
    var checkBox = $(this).find('input[type="checkbox"]');
    checkBox.trigger('click');

    if (checkBox.is(':checked')) {
      $(this).css('background-color','#fd7777');
      $(this).css('color','white');
    } else {
      $(this).css('background-color','#ffcccc');
      $(this).css('color','black');
    }
  });


	$('body').on('submit', '#create-member-form', function(event) {
		event.preventDefault();
		// create the member.
		$.ajax({
			url: '/members/register_member',
			type: 'POST',
			data: $(this).serialize(),
		})
		.done(function(data) {
			if (data.success) {
				// register the member to the group.
				$('#new-member-form').slideUp(500);
				$('#create-member-form').trigger('reset');
				regMember($('#reg-member').serialize());
				$(this).trigger('reset');

			} else {
				populateErrors(data.message);
			}
		})		
	});

	$("body").on('click', '.activate-this-user', function(event) {
		event.preventDefault();
		dispatcher.trigger('activate_member', { member_id: $(this).attr('member-id')})
	});

	$("body").on('submit', '#reg-member', function(event) {
		event.preventDefault();
		regMember($(this).serialize());
	});

	$("body").on('click', '.remove-this-user', function(event) {
		event.preventDefault();
		var mb_id = $(this).attr('data-id');
		removeMemberFromDom(mb_id);		
	});

	$('body').on('click', '.buy-ticket', function(event) {
		event.preventDefault();
		var mem_id = $(this).attr('data-id');
		var need_id = $(this).attr('need-id');
		var member_group_id = $(this).attr('member_group_id');
		var group_id = <%= @grp.id %>;
		coverMember(mem_id, need_id, member_group_id, group_id);
	});

	function regMember(dataSend){
		$.ajax({
			url: '/members/register_member_to_group',
			method: 'POST',
			data: dataSend,
		})
		.done(function(data) {
			if (data.success == true) {
				$("#reg-member").trigger('reset');
				var obj = {connection: connectionID, room: <%= @grp.id %>, member_id: data.member_id, member_group_id: data.member_group_id}
				dispatcher.trigger('register_member', obj)
			} else {
				if (data.new_member) {
					$('#new-member-form').slideDown('500', function() {
						var sdcc_num = $('#sdcc_member_id_holder').val();
						$('#sdcc_member_id_holder_create').val(sdcc_num);
					});
				} else {
					populateErrors(data.message);
				}
			}
		})
	}

	var coverMember = function(member_id, need_id, member_group_id, group_id){
		$.ajax({
			url: '/members/cover_member',
			data: {member_id: member_id, need_id: need_id, member_group_id: member_group_id, group_id: group_id},
		})
		.done(function(data) {
			if (data.success) {
				var obj = {connection: connectionID, member_group_id: data.member_group_id, groups: data.groups, group_id: data.group_id};
				dispatcher.trigger('cover_member', obj);
			} else {
				populateErrors(data.message);
			}
		})
		
	}

  var removeMemberFromDom = function(member_group_id) {
    $.ajax({
    	url: '/members/remove_member',
    	method: 'DELETE',
    	data: {mem_grp_id: member_group_id, grp_id: <%= @grp.id %>},
    })
    .done(function(data) {
    	if (data.success) {
			  	var obj = {connection: connectionID, room: <%= @grp.id %>, member_group_id: data.message}
					dispatcher.trigger('unregister', obj)
    	}
    })
  }

  var addMemberToDom = function(message) {
    var member_group_id = message.member_group_id;
    $.ajax({
    	url: '/groups/present_member',
    	data: {mem_grp_id: member_group_id, grp_id: <%= @grp.id %>},
    })
    .done(function(data) {
    	$("#member-list").append(data);
    })
  }

  var success = function(response) {
	  console.log("Wow it worked: ", response);
	}

	var failure = function(response) {
		  console.log("That just totally failed: ", response);
	}


	function startDispatch(){
		<% if Rails.env.development? %>
		  dispatcher = new WebSocketRails('localhost:3002' + "/" + "websocket");
		<% else %>
	  	dispatcher = new WebSocketRails(window.document.location.host + "/" + "websocket");
		<% end %>
	  dispatcher.on_open = function(data) {
	  	// sleep(1000);
	  	if (!activeDispatcher) {
	  		// return;
		    console.log('Connection has been established: ', data);
		    connectionID = data.connection_id;
		    connection = <%= @grp.id %>;
		    group_room_conn = 'group_'+ connection;
		    channel = dispatcher.subscribe(group_room_conn);
		    var room_create_success = group_room_conn + '_created';
		    activeDispatcher = true;

		    // BINDING EVENTS

		    // listen for newly registered members
		    channel.bind("member_registered", function(mes) {
		    	// if (message.connection_id != connectionID) {
		    	// 	return;
		    	// }
		    	var number = mes.num_of_ppl;
		    	if (number == 1) {
			    	$(".number-of-members").text(number + ' Member in this buying group')
		    	} else if (number == 0) {
			    	$(".number-of-members").text('This buying group is empty')
		    	} else {
			    	$(".number-of-members").text(number + ' Members in this buying group')
		    	}
		    	addMemberToDom(mes);
		    });

		    // listen for any dropped members
		    channel.bind("unregister_member",function(mes) {
		    	// if (message.connection_id != connectionID) {
		    	// 	return;
		    	// }
		    	var number = mes.num_of_ppl;
		    	if (number == 1) {
			    	$(".number-of-members").text(number + ' Member in this buying group')
		    	} else if (number == 0) {
			    	$(".number-of-members").text('This buying group is empty')
		    	} else {
			    	$(".number-of-members").text(number + ' Members in this buying group')
		    	}
		    	$("#member_row_" + mes.member_group_id).fadeOut('500', function() {
				    $("#member_row_" + mes.member_group_id).remove();
		    	});;
		    })

		    // listen for any covered members across all groups in this group
		    channel.bind("member_covered",function(mes) {
		    	// if (message.connection_id != connectionID) {
		    	// 	return;
		    	// }
			    $("#member_row_" + mes.member_group_id).addClass('member_covered');
			    $("#action-holder-for" + mes.member_group_id).html("This member has been covered");
		    })

		    // listen for active members
		    channel.bind("activate_member",function(mes) {
		    	// activate member
		    	debugger
			    // $(".member_select_" + mes.member_id).addClass('member_active');
		    	// activate groups that member belongs to
			    $(".member_groups_marker_" + mes.member_id).addClass('member_active');
		    })

		    // chatroom listener
		    channel.bind('add_room_message', function(message) {
		    	// if (message.connection_id != connectionID) {
		    	// 	return;
		    	// }
		    	if ($('.chat-box').css('height') == "25px") {
			    	$('.chat-box').animate({'background-color':'#b2f581'}, 500);
			    	$('.expand-chat-log').animate({'background-color':'#b2f581'}, 500);
			    	$('.expand-chat-log').text("New Message, click here to expand chat");
		    	}
		    	console.log(message.connection_id);
		    	if (typeof message.connection_id != 'undefined' ) {
			    	addCommentToDom(message);
		    	}
		    });

		    // someone_typing
		    channel.bind('someone_typing', function(message) {
		    	someoneTyping();
		    });

	    console.log(room_create_success);
	  	}
	  }
	}

	setTimeout(function(){
	  startDispatch();
	}, 500);

  var someoneTyping = function(){
  	$('.someone_typing').css('display', 'block');
  	$('.someone_typing').fadeOut(2000, function() {
  		
  	});

  }


// chat rooom functionality
	// var elem = document.getElementById('chat_log');
	// var elem2 = document.getElementById('chat_container');
 //  elem.scrollTop = elem.scrollHeight;
 //  elem2.scrollTop = elem2.scrollHeight;

 $('body').on('keydown', '.chat-message-input', function(event) {
		if (event.which == 13) {
		 	event.preventDefault();
		 	var message = $(this).val();
		 	$(this).val('');
		 	$.ajax({
		 		url: '/groups/process_message',
		 		type: 'POST',
		 		data: {message: {message: message, group_id: <%= @grp.id %>}},
		 	})
		 	.done(function(data) {
		 		if (data.success) {
			 		var obj = { message: data.message, room: <%= @grp.id %>, user_id: data.user_id, connection: connectionID};
			 		dispatcher.trigger('send_chat_message', obj);
		 		} else {
		 			populateErrors(data.message);
		 		}
		 	})

		} else {
			// notify users that someone is typing
			dispatcher.trigger('someone_typing', {room: "<%= @grp.id %>"}, success, failure);
		}
 });

 $('body').on('click', '#non-covered-toggle', function(event) {
 	event.preventDefault();
 	if ($('.member_covered').css('display') == 'none') {
	 	$('.member_covered').slideDown(500);
 	} else {
	 	$('.member_covered').slideUp(500);
 	}
 });

$('body').on('click', '.expand-chat-log', function(event) {
	event.preventDefault();
	if ($('.chat-box').css('height') == '500px') {
		$('.chat-box').animate({'height': '0px'}, 500);
	} else {
		$('.chat-box').animate({'height': '500px'}, 500);
		$('.chat-box').animate({'background-color':'#efeacc'}, 500)
  	$('.expand-chat-log').animate({'background-color':'#3c8dbc'}, 500)
  	$('.expand-chat-log').text("expand chat log");
	}

});

  var addCommentToDom = function(message) {
  	var message_id = message.message_id;
    // if (message.connection_id == connectionID) {
    	$.ajax({
    		url: '/groups/add_comment',
    		data: {message_id: message_id, from: 'dom'},
    	})
    	.done(function(data) {
	      $("#chat_log").prepend(data);
	      $(".chat-line").slideDown(500, function() {});
    	})
    	
    // }
    // elem.scrollTop = elem.scrollHeight;
    var elem = $('#chat_log');
    elem.scrollTop = 0;
    console.log('just received new message: ' + message);
  }
	
</script>

<style type="text/css">

</style>